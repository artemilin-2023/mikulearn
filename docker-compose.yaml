x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2025-04-08T15-41-24Z
  command: server --console-address ":9001" /data
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  backend:
    build:
      context: src/backend
      dockerfile: Dockerfile
    environment:
      # Change to Release if needed
      - ASPNETCORE_ENVIRONMENT=Development
      - ALLOWED_CORS_HOSTS=https://localhost
      - ConnectionStrings__Rabbit=amqp://rmuser:rmpassword@rabbitmq:5672
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Postgres=Host=postgres;Database=database;Username=postgres;Password=password
      - ConnectionStrings__MinIO=Host=minio:9000;BucketName=huipetrovich;Username=minioadmin;Password=minioadmin
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=database
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./src/frontend/
      dockerfile: build/Dockerfile
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  caddy:
    build:
      context: ./proxy/
      dockerfile: Dockerfile
    environment:
      # Uncomment, add the domain, host and CF token. Voila, you have HTTPS
      #CADDY_EXTRA_DIRECTIVES: import cloudflare_dns
      #CADDY_CERT_DOMAIN: "*.y7o4ka.xyz"
      #CADDY_HOST: ebangelion.y7o4ka.xyz
      CLOUDFLARE_API_TOKEN: <API_TOKEN_HERE>
    volumes:
      - ./proxy/conf:/etc/caddy
      - caddy-data:/data
    ports:
      - 80:80
      - 443:443

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:4
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq-state:/var/lib/rabbitmq
  minio:
    <<: *minio-common
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data

  llm-service:
    build:
      context: src/llm-service
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://rmuser:rmpassword@rabbitmq:5672
      - TASK_QUEUE_NAME=task_queue
      - RESPONSE_QUEUE_NAME=response_queue
      - TASK_ROUTING_KEY=llm.tasks
      - RESPONSE_ROUTING_KEY=llm.response
      - EXCHANGE_NAME=llm.services
      - OPENROUTER_API_URL=https://openrouter.ai/api/v1
      - OPENROUTER_API_KEY=<TOKEN_HERE>
      - OPENROUTER_MODEL=mistralai/mistral-7b-instruct:free
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=huipetrovich
    restart: on-failure

volumes:
  postgres-data:
  redis-data:
  caddy-data:
  rabbitmq-state:
  minio-data:
