x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2025-04-08T15-41-24Z
  command: server --console-address ":9001" /data
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  backend:
    build: 
      context: src/backend 
      dockerfile: Dockerfile
    networks:
      - eblangelion
    ports:
      - 8080:8080
      - 8081:8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=database
    networks:
      - eblangelion
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d database"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s


  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: root@mail.xyz
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - 5050:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  redis:
    image: redis:latest
    networks:
      - eblangelion
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend-build:
    build:
      context: ./src/frontend/
      dockerfile: Dockerfile
    volumes:
      - frontend-build:/app/dist

  nginx:
    image: nginx:alpine
    depends_on:
      frontend-build:
        condition: service_completed_successfully
      backend:
        condition: service_started
    networks:
      - eblangelion
    ports:
      - 3000:80
    volumes:
      - frontend-build:/usr/share/nginx/html
      - ./configurations/nginx.conf:/etc/nginx/nginx.conf:ro

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:4-management
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    networks:
      - eblangelion
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq-state:/var/lib/rabbitmq
  minio: 
    <<: *minio-common 
    container_name: minio
    networks:
      - eblangelion
    ports:
      - "9000:9000"  
      - "9001:9001" 
    volumes:
      - minio-data:/data
    
volumes:
  postgres-data:
  pgadmin-data:
  redis-data: 
  frontend-build:
  rabbitmq-state:
  minio-data:

networks:
  eblangelion:
    name: eblangelion
    driver: bridge
